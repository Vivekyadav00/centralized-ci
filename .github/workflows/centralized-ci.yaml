name: 'Centralized Terraform Workflow'

on:
  workflow_call:
    inputs:
      tf_workspace:
        required: true
        type: string
      config_directory:
        required: false
        type: string
        default: "./"
    secrets:
      TF_API_TOKEN:
        required: true
     

env:
  TF_CLOUD_ORGANIZATION: "Vivekyadav-tf"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"

permissions:
  contents: read
  pull-requests: write

jobs:
  pre-commit:
    name: "Run Pre-Commit Checks"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install Python
        uses: actions/setup-python@v5

      - name: Install terraform-docs
        shell: bash
        run: |
          mkdir -p "$HOME/.local/bin" downloads
          curl -Lso ./downloads/terraform-docs.tar.gz \
            https://github.com/terraform-docs/terraform-docs/releases/download/v0.18.0/terraform-docs-v0.18.0-$(uname)-amd64.tar.gz
          tar -xzf downloads/terraform-docs.tar.gz -C downloads
          chmod +x downloads/terraform-docs
          mv downloads/terraform-docs "$HOME/.local/bin/terraform-docs"
          rm -rf downloads

      - name: Install tflint
        shell: bash
        run: |
          mkdir -p "$HOME/.local/bin" downloads
          curl -Lso ./downloads/install_linux.sh \
            https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh
          TFLINT_INSTALL_PATH="$HOME/.local/bin" bash ./downloads/install_linux.sh
          rm -rf downloads

      - name: Run Pre-Commit Hooks
        uses: pre-commit/action@v3.0.1

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: pre-commit
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ inputs.tf_workspace }}
          directory: ${{ inputs.config_directory }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ inputs.tf_workspace }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output');
            });
            const output = `#### HCP Terraform Plan Output
                \`\`\`
                Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                \`\`\`
                [HCP Terraform Plan](${{ steps.plan-run.outputs.run_link }})
                `;
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });
